generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  QA
  IN_REVIEW
  DONE
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  members       Member[]
  projects      Project[]
  avatar        Avatar?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  storageId String?
  created   DateTime @default(now())
  updated   DateTime @updatedAt

  members   Member[]
  projects  Project[]  
  tasks     Task[]
  sprints    Sprint[]
}

model Member {
  id          String    @id @default(cuid())
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  role          Role            @default(USER)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaces  Workspace[]

}

model Project {
  id        String   @id @default(cuid())
  name      String
  workspaceId  String
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  tasks       Task[]
  workspace        Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User[]  
  status      Status[]
  sprints    Sprint[]
}

model Status {
  id          String    @id @default(cuid())
  name        String
  color       String?
  projectId  String
  position    Int
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String    @default("")
  url         String    @default("")
  userStoryId String    @default("")
  dueDate     DateTime?  
  position    Int
  status      String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  assignedId  String    @default("")
  sprint       Sprint?     @relation(fields: [sprintId], references: [id])
  sprintId     String?
  blocks       TaskBlock[]
  storyPoints Int       @default(0)
  actualStoryPoints Int?   @default(0)   // Story Points realizados
  estimatedTime   Int    @default(0)     // Tempo estimado (em horas)
  actualTime      Int?    @default(0)    // Tempo real (em horas)
  blockedTime     Int?     @default(0)   // Tempo bloqueado (em horas)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Avatar {
  id          String       @id @default(cuid())
  sex         String      // 'man' | 'woman'
  earSize     String      // 'small' | 'big'
  hairStyle   String      // depends on sex
  hatStyle    String      // 'beanie' | 'turban' | 'none'
  eyeStyle    String      // 'circle' | 'oval' | 'smile'
  glassesStyle String     // 'round' | 'square' | 'none'
  noseStyle   String      // 'short' | 'long' | 'round'
  mouthStyle  String      // 'laugh' | 'smile' | 'peace'
  shirtStyle  String      // 'hoody' | 'short' | 'polo'
  eyeBrowStyle String     // 'up' | 'upWoman'
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
}

model Sprint {
  id                String       @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  totalStoryPoints  Int         @default(0)
  tasks             Task[]
  status            Int         @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  projectId         String?
  project           Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId       String?
  workspace         Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model TaskBlock {
  id          String        @id @default(cuid())
  task        Task          @relation(fields: [taskId], references: [id])
  taskId      String
  reason      String?
  blockedAt   DateTime      @default(now())
  unblockedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}