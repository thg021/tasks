generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  QA
  IN_REVIEW
  DONE
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  members       Member[]
  projects      Project[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  storageId String?
  created   DateTime @default(now())
  updated   DateTime @updatedAt

  members   Member[]
  projects  Project[]  
  tasks       Task[]
}

model Member {
  id          String    @id @default(cuid())
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  role          Role            @default(USER)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaces  Workspace[]

}

model Project {
  id        String   @id @default(cuid())
  name      String
  workspaceId  String
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  tasks       Task[]
  workspace        Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User[]       
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime
  position    Int
  status      TaskStatus
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  assignedId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}